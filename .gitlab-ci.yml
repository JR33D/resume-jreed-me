image: node:latest

stages: # List of stages for jobs, and their order of execution
  - install
  - build
  - quality
  #- docker

install-client:
  stage: install
  script:
    - cd $CI_PROJECT_DIR/client
    - npx yarn install
  artifacts:
    name: "client-artifacts"
    untracked: true
    expire_in: 30 mins
    paths:
      - $CI_PROJECT_DIR/client/.npm/
      - $CI_PROJECT_DIR/client/node_modules/

install-server:
  stage: install
  script:
    - cd $CI_PROJECT_DIR/server
    - npx yarn install
  artifacts:
    name: "server-artifacts"
    untracked: true
    expire_in: 30 mins
    paths:
      - $CI_PROJECT_DIR/server/.npm/
      - $CI_PROJECT_DIR/server/node_modules/

build-client: 
  stage: build
  script:
    - cd $CI_PROJECT_DIR/client
    - echo "Compiling the code..."
    - npx yarn build
    - echo "Compile complete."
  artifacts:
      paths:
         - build
      expire_in: 30 mins
  dependencies:
      - install-client

build-server: 
  stage: build
  script:
    - cd $CI_PROJECT_DIR/server
    - echo "Server code does not need compiling at this time."
  dependencies:
    - install-server

test-client:
  stage: quality 
  script:
    - cd $CI_PROJECT_DIR/client
    - echo "Running client unit tests..."
    - npx yarn test
  artifacts:
      paths:
         - build
      expire_in: 30 mins
  dependencies:
      - install-server

test-server:
  stage: quality 
  script:
    - cd $CI_PROJECT_DIR/server
    - echo "Running server unit tests..."
    - npx yarn test
  artifacts:
      paths:
         - build
      expire_in: 30 mins
  dependencies:
      - build-server

# docker-build:
#   # Use the official docker image.
#   image: docker:latest
#   stage: docker # This job runs in the deploy stage.
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   # Default branch leaves tag empty (= latest tag)
#   # All other branches are tagged with the escaped branch name (commit ref slug)
#   script:
#     - |
#       if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#         tag=""
#         echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#       else
#         tag=":$CI_COMMIT_REF_SLUG"
#         echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#       fi
#     - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
#     - docker push "$CI_REGISTRY_IMAGE${tag}"
#   # Run this job in a branch where a Dockerfile exists
#   rules:
#     - if: $CI_COMMIT_BRANCH
#       exists:
#         - Dockerfile
